name: Generate GrowliZard Pokémon Sheet

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Python Dependencies
        run: |
          pip install pandas requests beautifulsoup4 Pillow fpdf2 replicate

- name: Scrape TCGplayer Data
        run: |
          python << 'EOF'
          import pandas as pd
          import requests
          from bs4 import BeautifulSoup
          import json
          import re

          # --- Configuration ---
          # The URL construction was failing. We now hardcode the direct URL.
          # To scrape a different set, find its search page on TCGplayer and paste the URL here.
          URL = "https://www.tcgplayer.com/search/pokemon/sv10-destined-rivals?view=grid&productLineName=pokemon&setName=sv10-destined-rivals"
          
          print(f"Scraping URL: {URL}")

          # --- Scrape the Page ---
          headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
          try:
            page = requests.get(URL, headers=headers)
            page.raise_for_status() # Raise an error for bad responses (4xx or 5xx)
            soup = BeautifulSoup(page.content, "html.parser")
          except requests.exceptions.RequestException as e:
            print(f"!!! FAILED to fetch TCGplayer page: {e}")
            exit(1)

          # --- Find and Parse Card Data ---
          card_list = []
          # Find all the 'div' elements that act as containers for each search result
          search_results = soup.find_all("div", class_="search-result")

          if not search_results:
            print("!!! No search results found. TCGplayer might have changed their HTML structure or the URL is wrong.")
            exit(1)

          print(f"Found {len(search_results)} card results on the page.")

          for card in search_results:
              name_tag = card.find("span", class_="search-result__title")
              price_tag = card.find("span", class_="inventory__price-with-shipping")
              image_tag = card.find("img", class_="search-result__image")

              # Extract the text and data if the tags were found
              name = name_tag.text.strip() if name_tag else None
              price_text = price_tag.text.strip() if price_tag else "$0.00"
              image_url = image_tag['src'] if image_tag else None
              
              # Clean up the price to get only the number
              price_match = re.search(r'\$([\d,]+\.\d{2})', price_text)
              price = float(price_match.group(1).replace(",", "")) if price_match else 0.0

              if name and image_url:
                  card_list.append({
                      "name": name,
                      "marketPrice": price,
                      "imageUrl": image_url
                  })

          # --- Save to CSV ---
          if card_list:
            df = pd.DataFrame(card_list)
            # We'll name the CSV after the set we're actually scraping
            df.to_csv("twilight_masquerade.csv", index=False)
            print(f"✅ Successfully scraped {len(df)} cards and saved to twilight_masquerade.csv")
          else:
            print("!!! FAILED to parse any card data from the page.")
            exit(1)
          EOF

      # --- The rest of your workflow remains the same ---
      - name: Download or generate card images
        env:
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        run: |
          mkdir -p images
          python << 'EOF'
          import pandas as pd
          import requests
          import os
          import replicate
          from PIL import Image, ImageDraw, ImageFont
          from io import BytesIO
          csv_file = "destined_rivals.csv"
          df = pd.read_csv(csv_file)

          client = replicate.Client(api_token=os.environ["REPLICATE_API_TOKEN"])

          for _, row in df.iterrows():
              card_name = row.get("name", "unknown").replace("/", "_").replace(" ", "_").replace(":", "")
              img_path = f"images/{card_name}.jpg"
              image_url = row.get("imageUrl")

              if os.path.exists(img_path):
                  print(f"Skipping existing image: {card_name}")
                  continue

              if pd.notna(image_url):
                  try:
                      img_data = requests.get(image_url).content
                      with open(img_path, "wb") as f:
                          f.write(img_data)
                      print(f"Downloaded official: {card_name}")
                      continue
                  except:
                      print(f"Failed official image for: {card_name}")

              print(f"Generating AI art for: {card_name}")
              prompt = f"High quality digital painting of a Pokémon-style trading card featuring {row.get('name', 'a creature')}, full art, vibrant colors, no text, fantasy background, trading card art style"
              try:
                  output = client.run(
                      "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
                      input={"prompt": prompt, "width": 512, "height": 736}
                  )
                  img_data = requests.get(output[0]).content
                  with open(img_path, "wb") as f:
                      f.write(img_data)
              except Exception as e:
                  print(f"!!! AI generation failed for {card_name}: {e}")
          EOF

      - name: Generate printable PDF
        run: |
          python << 'EOF'
          import os
          import pandas as pd
          from fpdf import FPDF
          df = pd.read_csv("destined_rivals.csv")

          pdf = FPDF('P', 'mm', 'A4')
          pdf.set_auto_page_break(False)
          pdf.add_font('Arial', '', '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf', uni=True)
          pdf.add_font('Arial', 'B', '/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf', uni=True)

          card_w, card_h = 63, 88
          margin_x, margin_y = 10, 10
          gap_x, gap_y = 5, 15

          card_data = []
          for index, row in df.iterrows():
              card_name_safe = row.get("name", "unknown").replace("/", "_").replace(" ", "_").replace(":", "")
              img_path = f"images/{card_name_safe}.jpg"
              if os.path.exists(img_path):
                  card_data.append({
                      "name": row["name"],
                      "price": row.get("marketPrice"),
                      "path": img_path
                  })

          for idx, card in enumerate(card_data):
              if idx % 9 == 0:
                  pdf.add_page()

              col = (idx % 3)
              row = ((idx % 9) // 3)
              x = margin_x + col * (card_w + gap_x)
              y = margin_y + row * (card_h + gap_y)

              pdf.image(card["path"], x, y, card_w, card_h)
              
              pdf.set_draw_color(200, 200, 200)
              pdf.rect(x, y, card_w, card_h)

              name = card['name']
              price = card['price']
              price_text = f"${price:.2f}" if isinstance(price, (int, float)) else ""

              pdf.set_font("Arial", 'B', size=8)
              pdf.set_text_color(0, 0, 0)
              pdf.set_xy(x, y + card_h + 2)
              pdf.multi_cell(card_w, 4, f"{name}", align='C')

              pdf.set_font("Arial", '', size=7)
              pdf.set_xy(x, y + card_h + 7)
              pdf.multi_cell(card_w, 4, f"{price_text}", align='C')

          os.makedirs("printables", exist_ok=True)
          pdf.output("printables/destined_rivals_placeholders.pdf")
          EOF

      - name: Commit results
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add destined_rivals.csv images/ printables/
          git commit -m "Update GrowliZard CSV, images (with AI), and PDF sheets" || echo "No changes to commit"
          git push
