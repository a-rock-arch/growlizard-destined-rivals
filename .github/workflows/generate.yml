- name: Scrape TCGplayer Data
        run: |
          python << 'EOF'
          import pandas as pd
          import requests
          from bs4 import BeautifulSoup
          import json
          import re

          # --- Configuration ---
          # The URL construction was failing. We now hardcode the direct URL.
          # To scrape a different set, find its search page on TCGplayer and paste the URL here.
          URL = "https://www.tcgplayer.com/search/pokemon/sv10-destined-rivals?view=grid&productLineName=pokemon&setName=sv10-destined-rivals"
          
          print(f"Scraping URL: {URL}")

          # --- Scrape the Page ---
          headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
          try:
            page = requests.get(URL, headers=headers)
            page.raise_for_status() # Raise an error for bad responses (4xx or 5xx)
            soup = BeautifulSoup(page.content, "html.parser")
          except requests.exceptions.RequestException as e:
            print(f"!!! FAILED to fetch TCGplayer page: {e}")
            exit(1)

          # --- Find and Parse Card Data ---
          card_list = []
          # Find all the 'div' elements that act as containers for each search result
          search_results = soup.find_all("div", class_="search-result")

          if not search_results:
            print("!!! No search results found. TCGplayer might have changed their HTML structure or the URL is wrong.")
            exit(1)

          print(f"Found {len(search_results)} card results on the page.")

          for card in search_results:
              name_tag = card.find("span", class_="search-result__title")
              price_tag = card.find("span", class_="inventory__price-with-shipping")
              image_tag = card.find("img", class_="search-result__image")

              # Extract the text and data if the tags were found
              name = name_tag.text.strip() if name_tag else None
              price_text = price_tag.text.strip() if price_tag else "$0.00"
              image_url = image_tag['src'] if image_tag else None
              
              # Clean up the price to get only the number
              price_match = re.search(r'\$([\d,]+\.\d{2})', price_text)
              price = float(price_match.group(1).replace(",", "")) if price_match else 0.0

              if name and image_url:
                  card_list.append({
                      "name": name,
                      "marketPrice": price,
                      "imageUrl": image_url
                  })

          # --- Save to CSV ---
          if card_list:
            df = pd.DataFrame(card_list)
            # We'll name the CSV after the set we're actually scraping
            df.to_csv("twilight_masquerade.csv", index=False)
            print(f"âœ… Successfully scraped {len(df)} cards and saved to twilight_masquerade.csv")
          else:
            print("!!! FAILED to parse any card data from the page.")
            exit(1)
          EOF
