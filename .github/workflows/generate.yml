name: Generate GrowliZard Pok√©mon Sheet (Final Diagnostic)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Dependencies and Browsers
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests beautifulsoup4 playwright
          python -m playwright install --with-deps
          
      - name: Run Final Diagnostic Scraper
        run: |
          python << 'EOF'
          import pandas as pd
          from bs4 import BeautifulSoup
          import re
          from playwright.sync_api import sync_playwright
          import time

          BASE_URL = "https://www.tcgplayer.com/search/pokemon/sv-shrouded-fable?productLineName=pokemon&setName=sv-shrouded-fable&productTypeName=Cards&view=grid"
          TARGET_SET_NAME = "Shrouded"
          
          print(f"Starting FINAL DIAGNOSTIC for set containing '{TARGET_SET_NAME}'...")

          with sync_playwright() as p:
              browser = p.chromium.launch(headless=True)
              page = browser.new_page()

              paginated_url = f"{BASE_URL}&page=1"
              print(f"Scraping URL: {paginated_url}")
              
              html_content = ""
              try:
                  page.goto(paginated_url, wait_until="domcontentloaded", timeout=60000)
                  page.wait_for_selector("div.search-result, div.search-feedback", timeout=30000)
                  
                  print("Scrolling down to trigger lazy-loaded images...")
                  page.evaluate("window.scrollTo(0, document.body.scrollHeight);")
                  time.sleep(2) # Give images a moment to load
                  
                  html_content = page.content()

              except Exception as e:
                  print(f"!!! FAILED during Playwright browser operation: {e}")
                  exit(1)

              soup = BeautifulSoup(html_content, "html.parser")
              search_results = soup.find_all("div", class_="search-result")

              if not search_results:
                print("!!! No search results found.")
                exit(1)
              
              print(f"Found {len(search_results)} card results on page 1. Analyzing filter conditions...\n")

              for i, card in enumerate(search_results):
                  print(f"--- Parsing Card #{i+1} ---")
                  name_tag = card.find("span", class_="product-card__title")
                  price_tag = card.find("span", class_="product-card__market-price--value")
                  image_tag = card.find("img")
                  set_name_tag = card.find("h4", class_="product-card__set-name")

                  name = name_tag.text.strip() if name_tag else None
                  image_url = image_tag.get("src") if image_tag else None
                  set_name = set_name_tag.text.strip() if set_name_tag else "" 

                  print(f"  - Found Name: '{name}'")
                  print(f"  - Found Image URL: '{image_url}'")
                  print(f"  - Found Set Name: '{set_name}'")

                  # --- Evaluating Conditions ---
                  cond1_name_exists = bool(name)
                  cond2_image_exists = bool(image_url)
                  # This check is now safer
                  cond3_not_placeholder = "data:image/gif" not in image_url if image_url else False
                  cond4_set_matches = TARGET_SET_NAME in set_name

                  print(f"\n  - Condition 1 (Name Exists?): {cond1_name_exists}")
                  print(f"  - Condition 2 (Image URL Exists?): {cond2_image_exists}")
                  print(f"  - Condition 3 (Is Not Placeholder GIF?): {cond3_not_placeholder}")
                  print(f"  - Condition 4 (Set Name Matches '{TARGET_SET_NAME}'?): {cond4_set_matches}")

                  if cond1_name_exists and cond2_image_exists and cond3_not_placeholder and cond4_set_matches:
                      print("  --> RESULT: Card PASSED filter.\n")
                  else:
                      print("  --> RESULT: Card FAILED filter.\n")

              browser.close()
          EOF